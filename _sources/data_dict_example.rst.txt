

Data Dictionary Setup Tutorial
==============================


Manual Configuration Example
----------------------------

This example will be importing from the following dataset in a Django app named ``my_study``:
::
    class Subject(models.Model):
    	subject_uid = models.CharField(max_length=255, unique=True)
    	gender = models.CharField(max_length=6, blank=True, null=True)
    	dob = models.DateField(blank=True, null=True)
    	
    class Race(models.Model):
        subject = models.ManyToManyField('Subject')
        race_name = models.CharField(max_length=30)
        
    class Survey(models.Model):
        subject = models.ForeignKey('Subject', on_delete=models.CASCADE)
        survey_name =  models.CharField(max_length=6)
        survey_date = models.DateField()
        has_fever = models.BooleanField()
        bmi = models.FloatField()
        
        
Setting up Collections
^^^^^^^^^^^^^^^^^^^^^^

The first decision we need to make is how to set up our Collections to structure the database. We have
a ``Subject`` table that has a many:many relationship to ``Race`` and a 1:many relationship to ``Survey``.

For data about research participants or patients, you will almost always want the person to be
the root collection. So we will use ``Subject`` as the root collection. ``Survey`` is longitudinal data
(one subject can have multiple surveys over time), so we will create a second collection to hold
the survey data.

``Race`` is a little trickier. The model allows a single subject to specify multiple races. However,
the data is not longitudinal, and it is not a collection of related fields but simply a single
field ``race_name``. For those reasons, this is a good candidate for an overloaded field. Instead
of creating a separate ``Race`` collection, we will put the ``race_name`` concept in the ``Subject`` collection and
store an array of strings whenever a subject has multiple races.

So in total we will have two collections:
::
    from chiron import models
    
    subject_collection = models.Collection(
    	permanent_id="subject",
    	name="study subject",
    	is_root_collection=True
    )
    subject_collection.save()
    
    survey_collection = models.Collection(
    	permanent_id="survey",
    	name="survey",
    )
    survey_collection.save()
    

Setting up Source Collections
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Next we need to define our source collections and set up source collection processors. 
Recall that a source collection processor needs to return a dataset as an iterable. 
To populate our Subject collection, we will need an iterable of subjects, and to populate our
Survey collection we will need an iterable of surveys.

Chiron has a built-in source collection processor for getting data from the Django ORM. We will
configure two source collections - one associated with the Subject model and one with the Survey model.
Let's start with the Subject:
::
    # create the subject source collection
    sc_processor = models.Processor.get(name="Source Collection Processor for Django Model")
    subject_sc = models.SourceCollection(
    	name="subjects",
    	collection=subject_collection,
    	processor=sc_processor,
    	execution_order=1
    )
    subject_sc.save()   
    
We're not finished with our subject source collection yet. The built-in Django source collection
processor class requires some
arguments when initialized. At a minimum we need to tell it which app and model to iterate.

There is a model ``SourceCollectionProcessorArgument`` to set these values:
::
    # provide arguments to configure the subject source collection processor
    arg_app = models.SourceCollectionProcessorArgument(
    	source_collection=subject_sc,
    	name="app",
    	value="my_study"
    )
    arg_app.save()
    arg_model = models.SourceCollectionProcessorArgument(
    	source_collection=subject_sc,
    	name="model",
    	value="Subject"
    )
    arg_model.save()
    
Our source collection processor is also responsible for setting an ``_id`` value. By default, the
processor will use the model primary key. In the ``Subject`` model, the primary key is an 
``id`` field implicitly created by Django. However, we also have a unique ``subject_uid`` field
that we could use.
    
Let's use the ``subject_id`` field:
::
    arg_collection_id = models.SourceCollectionProcessorArgument(
    	source_collection=subject_sc,
    	name="collection_id",
    	value="subject_uid"
    )
    arg_collection_id.save()
    
The ``Subject`` source collection is now complete. Next we will set up the ``Survey`` source collection the
same way:
::
    # create the survey source collection
    survey_sc = models.SourceCollection(
    	name="surveys",
    	collection=survey_collection,
    	processor=sc_processor,
    	execution_order=2
    )
    survey_sc.save()
    
    # provide arguments to configure the survey source collection processor
    arg_app = models.SourceCollectionProcessorArgument(
    	source_collection=survey_sc,
    	name="app",
    	value="my_study"
    )
    arg_app.save()
    arg_model = models.SourceCollectionProcessorArgument(
    	source_collection=survey_sc,
    	name="model",
    	value="Survey"
    )
    arg_model.save()
    
For surveys, we have two ``_id`` fields to worry about. First, we need a ``collection_id`` which will be
a unique identifier for each survey. Then, in order to associate surveys with the appropriate subject,
we need a ``root_collection_id``. This will be a unique identifier for the root_collection, which is the
``Subject`` collection.

For the survey ID, we can just leave it undefined and let Django use the ``Survey`` model primary key field.
However, the subject ID needs to match what we set previously - the ``subject_uid`` field in 
the ``Subject`` model.

Since we're iterating over the ``Survey`` model for surveys, we need to "follow" the foreign-key relationship
from Survey to Subject. The processor allows Django's built-in double underscore syntax to do that:
::
    arg_root_collection_id = models.SourceCollectionProcessorArgument(
    	source_collection=survey_sc,
    	name="root_collection_id",
    	value="subject__subject_uid"
    )
    arg_root_collection_id.save()

Now that both our Subject and Survey source collection are returning ``Subject.subject_uid`` as
the subject ID, they will be merged in MongoDB appropriately.  


Setting up Concepts
^^^^^^^^^^^^^^^^^^^

Now that our Collections and SourceCollections are all in place, we can begin defining the concepts we
want to import. For subjects we have ``gender``, ``race``, and ``DOB``. For Surveys, we have 
``survey_name``, ``survey_date``, ``has_fever`` and ``bmi``.

Concepts have three required processor classes:

* **ETL Processor**: retrieves values for this concept to put in MongoDB
* **Cohort Def Processor**: Manages how the concept works in queries
* **Display Processor**: Manages how the concept works in output datasets

The concept ETL processor works in close coordination with the source collection processor. Recall the main
function of the source collection processor is to return an iterable of records. The main function
of the ETL processor is to grab a specific value out of each of those record. Since we used the built-in
``Source Collection Processor for Django Model``, we will use the 
corresponding ``ETL Processor for Django Field``.
::
    etl_processor = models.Processor.get(name="ETL Processor for Django Field")

The cohort def and display processors depend on the concept data type. For gender, ``category field``
will be a good type. We have a single built-in class that can be used for both processor roles:
::
    category_processor = models.Processor.get(name="Category Field Processor")
    
Now we have all the references in place to build our ``gender`` concept:
::
    gender = models.Concept(
        permanent_id="subject_gender",
        name="gender",
        collection=subject_collection,
        source_collection=subject_sc,
        etl_processor=etl_processor,
        cohort_def_processor=category_processor,
        display_processor=category_processor
    )
    gender.save()
    
The ETL processor requires the argument ``django_field`` in order to know which model field to pull:
::
    arg_gender_django_field = models.ConceptProcessorArgument(
    	concept=gender,
    	name="django_field",
    	value="gender",
    	send_to_etl_processor=True
    )
    arg_gender_django_field.save()
    
The ``race`` concept is also a category and can use the same processors as gender:
::
    race = models.Concept(
        permanent_id="subject_race",
        name="race",
        collection=subject_collection,
        source_collection=subject_sc,
        etl_processor=etl_processor,
        cohort_def_processor=category_processor,
        display_processor=category_processor
    )
    race.save()

The ETL processor also requires the argument ``django_field``, but this time we need to use
Django's double-underscore syntax to get from the ``Subject`` model to the ``Race`` model:
::
    arg_race_django_field = models.ConceptProcessorArgument(
    	concept=race,
    	name="django_field",
    	value="race_set__race_name",
    	send_to_etl_processor=True
    )
    arg_race_django_field.save()    
    
Let's look at an example from the ``Survey`` model. We can set up a concept ``Survey.survey_date`` 
using a similar approach to our other concepts:
::
    survey_date = models.Concept(
        permanent_id="survey_date",
        name="survey date",
        collection=survey_collection,
        source_collection=survey_sc,
        etl_processor=etl_processor,
        cohort_def_processor=category_processor,
        display_processor=category_processor
    )
    survey_date.save()
    
    arg_survey_date_django_field = models.ConceptProcessorArgument(
    	concept=survey_date,
    	name="django_field",
    	value="survey_date",
    	send_to_etl_processor=True
    )
    arg_survey_date_django_field.save()  







Automated Configuration Example
-------------------------------

Chiron has a built-in management command for auto-generating a data dictionary from a set of
Django models. The final output will usually need to be further tweaked. However, it can be 
a major time-saver for a large number of fields. 

Your source data must satisfy these rules for the auto-generator

1. Your data must be stored in Django models.
2. You must have a model representing the root collection.
3. All models must be connected through Django model relationships.

Step 1. Create a model tree file
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You need to create a text file that shows how your Django model relationships are set up. This
file can go anywhere, but a good place to store it is 
`[YOUR PROJECT DIR]/chiron_config/autocreate/modeltree_[dataset name].txt`. The first entry in this file will 
be the app and model name of the model that corresponds to your root collection.
::
    # example for chiron_config/autocreate/modeltree_myapp.txt
    
    # note: the reader will ignore blank lines and lines starting with #
    
    myapp.Subjects
    
    

    
Step 2. Add child models of your root collection model
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A child model is any model that has a direct relationship to the root collection model.
The type of relationship (1:1, 1:many, many:1, many:many) doesn't matter. Use a dash to indicate
one step down in the hierarchy. You don't need to specify a model's app name unless it's different
from the parent. 

In the following example, demographics are stored in a separate 1:1 model, surveys and specimen are
stored in 1:many models. Specimen are in their own separate Django app, so we must specify the app
name.
::
    # example for chiron_config/autocreate/modeltree_myapp.txt
    
    myapp.Subjects
    -Demographics
    -specimen_app.Specimen
    -Surveys
    
    
Step 3. Continue to add children of children until you have listed all the models you want to import
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Use multiple dashes to indicate position in the hierarchy.
::
    # example for chiron_config/autocreate/modeltree_myapp.txt
    
    myapp.Subjects
    -Demographics
    --Race
    -specimen_app.Specimen
    --Freezer
    -surveys
    
Step 4: Mark models that should be made into collections
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The auto-creator will use a separate collection for any entries followed by an asterisk. The first model
in the list corresponds to your root collection and should always have an asterisk. For all other models,
the asterisk is optional based on your data. Models without an asterisk will be associated with the
closest parent containing an asterisk.

In the example, 

Let's consider each model in our example:

- **Demographics** - Demographics is 1:1 with Subjects, so we will leave the asterisk off and associate demographic
  fields directly with the Subject collection.

- **Race** - is 1:many with demographics (one person is allowed to have multiple races). However, assuming
  the Race table only has 1 field race_name, this will be a good option for an overloaded field. We 
  will leave off the asterisk, leaving Race field(s) associated with the Subject collection. If any
  subjects have multiple races listed, they will be stored as arrays with the distinct set of values found.

- **Specimen** - It is likely that subjects can have multiple specimen, and that specimen have 
  multiple values such as collection date, specimen type, amount, etc. For this reason, specimen
  can be considered longitudinal data and should get their own collection.

- **Freezer** - Let's assume that the freezer is many:1 with Specimen, i.e. a freezer
  has multiple specimen, but each specimen only has 1 freezer. Since there is only 1 freezer per
  specimen, we should leave off the asterisk and associate freezer fields directly with the Specimen collection.

- **Surveys** - If subjects complete multiple surveys, this is longitudinal data and should get its
  own collection. If subjects only complete a survey once, it would be better to leave off the asterisk and
  associate all survey fields directly with a subject. Let's assume the former and include an asterisk.

So the model with collections defined will look like this:
::
    # example forchiron_config/autocreate/modeltree_myapp.txt
    
    myapp.Subjects*
    -Demographics
    --Race
    -specimen_app.Specimen*
    --Freezer
    -surveys*
    
Step 5: Mark models that don't need their own Category
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Concepts are grouped into a hierarchy using the Category model. Keep in mind that the Category hierarchy
is completely separate from the collection hierarchy. The category only affects how the concepts are
displayed in  the UI, and has no impact on how concepts are stored or queried in MongoDB.

The auto-importer will create a category hierarchy that mirrors your defined model hierarchy. 
Every model will get its own category. However, if you don't want a model to get its own category, 
you can put an @ after it. For any models marked in this way, Django will not create a separate
category but instead will associate all of its corresponding concepts with its parent model.

In our example, let's add Race fields to the Demographics category and Freezer fields to the
Specimen category.
::
    # example for modeltree_myapp.txt
    
    myapp.Subjects*
    -Demographics
    --Race@
    -specimen_app.Specimen*
    --Freezer@
    -surveys*
    
Step 6: Create an `autocreate_dd_config` list of modeltree file locations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The `autocreate_dd_config` list tells Chiron where all your modeltree text files are. By default,
Chiron will look for this list in `chiron_config/autocreate/autocreate.py`. 
::
    # file location chiron_config/autocreate/autocreate.py

    autocreate_dd_config = [
        {
            'source_id' : 'myapp',		# this can be any unique ID you want
            'modeltree_path' : 'chiron_config/autocreate/modeltree_myapp.txt',
        },
    ]
    
Now you can run the autocreate management command. If your `autocreate_dd_config` file isn't in the
standard location, you can specify the Python module in Django settings using `CHIRON_AUTOCREATE_DD_MODULE_PATH`,
or you can pass it as an argument using `--module`.
::
    python manage.py chiron_autocreate_dd
    
Step 7: Cleanup
^^^^^^^^^^^^^^^

Your autocreated code may require additional editing. The autocreate tool creates a separate 
SourceCollection for each collection it creates. It assumes that the collection_id is the primary key of the
associated model, and that the root_collection_id is the primary key of that model. If you are using
different IDs in your project, you need to manually edit the processor arguments passed to
the SourceCollection.

There are also performance tweaks you can make with processor arguments such as 
select_related, prefetch_related, and max_batch_size.

Rerunning Autocreate After Changes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

There is a dedicated model `AutoImportedField` to keep track of all fields that have been loaded
through autocreate. Any fields that have been imported are tracked in this model and will not be
imported again, even if the associated Concepts have been modified or deleted. So it is safe 
to rerun `chiron_autocreate_dd` after adding new modeltrees, models, or fields. 

If you actually want to reload previously loaded concepts (for example, if you deleted something by accident),
you can remove the fields you wish to re-import from `AutoImportedField`, then run `chiron_autocreate_dd`
again.




    


    
    

