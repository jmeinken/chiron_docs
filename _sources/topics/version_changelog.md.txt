
# Version Changelog

## Version 4.1.0 (released 8/3/22)

1. Deprecated code and model fields related to the old processor registry were removed.
2. {ref}`admin-views` in the built-in UI were cleaned up and added to documentation.
3. Support for datasets (previously in beta) is now stable and ready for production use.
    - Home Page shows active dataset and lets you change the active dataset.
    - Each dataset allows you to define whether new users can access automatically and what their default permissions should be.
    - In admin, validation to make sure FK relationships are only between objects belonging to the same dataset.
    - New fields in dataset to override global settings such as CHIRON_SITE_TITLE and CHIRON_FOOTER_TEMPLATE - gives better ability to customize how the site looks for each dataset
   
**Upgrade from 4.0.x**
- Run django migrations `python manage.py migrate`
- If you have custom processors, remove all references to ProcessorRegistryOld.



## Version 4.0.1 (released 7/18/22)

1. Patch for major bug causing all analysis view queries to fail.

## Version 4.0.0 (released 6/30/22)

1. *(beta feature)* A single Chiron instance can now have multiple datasets. This is achieved using a Dataset
    model - each collection belongs to a Dataset.
2. Processors and processor arguments for concepts are no longer defined in the Concept model
    directly. Instead, they are bundled into a ConceptHandler class, and the concept model
    defines the concept handler to use.
    - If you have custom processors, you have to upgrade to the new way to register them. See new notes on {ref}`registering-custom-processors`.
3. Autocreating the data dictionary now uses source lists instead of modeltree text files. A
    source list is a Python list with each entry defining a source collection to create.
    - See {ref}`autocreate-the-data-dictionary`
   
## Version 3.1.0 (released 4/1/22)

1. New `CollectionRelationship` table in the data dictionary allows you to define 1:many and many:many relationships between subcollections.
   - See {ref}`data-model-explainer` for explanation of subcollection relationships and see the new data dictionary model {ref}`collection-relationship-model`.
2. The collections API flags collections with dates defined using new "has_event" property. 
3. New API endpoint to get the Chiron version number.

## Version 3.0.0 (released 2/11/22)

1. Added Analysis view 
   - This is a new tool that allows for the generation of pivot-table style datasets.
   - The new API endpoint group `analysis_def` work similarly to `table_def` and are used to define an analysis dataset.
   - The new API endpoints `analysis_tools` work similarly to `query_tools` and are used to actually run the queries.
   - The analysis view can be turned on/off in settings.

2. Added new aggregated permission level
   - The ChironUser model was modified for this. 
   - We already had 2 access levels, 1 for full PHI and 1 for deidentified data. This release adds a third access level for aggregated data.
   - Users with this access level will not have access to anything that would give them subject-level data.

3. Added caching for performance improvement
   - Caching can be turned on/off in settings. 
   - It is recommended to keep it off in development environments and on in production environments.

## Version 2.1.3 (released 12/13/21)

1. Updated to work with Pymongo v4

2. Some endpoints didn't allow you to pass a cohort_def/table_def, instead automatically using
the latest snapshot. Now all should work the same - you can either pass the definition or the
latest snapshot will be assumed.


## Version 2.1.0 (released 11/15/21)

1. Some minor changes to the database schema. Django migrations will need to be run.

2. Minor changes to cohort def:

   - All criteria sets in an extended cohort def now have a criteria_set_name that uniquely identifies the criteria set.
   - The criteria_set_name is either auto-generated or comes from the criteria set alias (also new)
   - The criteria set alias can be set using the new cohort def transformation option set_criteria_set_alias. This is an optional feature.
   - Criteria set with a date rule used to have an event_id with a unique name like "EVENT 1". That has been removed, use the criteria_set_name instead.

3. Major changes to table def:

   - most changes affect the table def options for the concept endpoint: /api/concepts/lab_event_name/?include_table_def_options=true
   - Some options for aggregation now have additional inputs for customization of that option.
   - During an add_entry transformation to the table def, can provide "entry_alias" to give user a way to create their own column headers.
   - For cohort def with multiple criteria sets for the same collection, typically data matching any of them will be included when calculating aggregation value. With new option "aggregation_criteria_set" can specify a specific criteria set to limit results.


## Version 2.0.0 (released 10/21/21)

1. Major overhaul of the query engine. Instead of generating the full report in MongoDB, pulls the
data it needs from MongoDB and does most of the report generation in Python.

## Version 1.3.0 (released 6/18/21)

1. There is a new model Project, and Reports can have a project associated with them. Projects
at this point are only used to help group reports.

2. Along with the new model Project is a new set of API endpoints.

   - see API Endpoints -> {ref}`api-endpoints-projects`

3. There is a new model ContentFlag that allows users to "star" reports that they are interested
in. There is a new API endpoint for flagging reports.

   - see API Endpoints -> {ref}`api-endpoints-reports-flag`

4. There is a small Django project with some dummy data for manual testing.




## Version 1.2.0 (released 4/29/21)

1. In table definition entries, "aggregation_style" and "aggregation_method" are now "aggregate"
(boolean) and "aggregation_method".

   - see Transforming Table Definitions -> {ref}`table-def-transformations-add-entry`

2. Two tranformation methods for adding and editing table def entries have been merged into one.

   - see Transforming Table Definitions -> {ref}`table-def-transformations-add-entry`

3. In the API concept detail view, "entry_id" query parameter was changed to "cohort_def_entry_id".

   - see API endpoint {ref}`api-concepts-detail-get`

4. Boolean cohort_def forms now works exactly like category cohort_def forms (except no exclude_selected option).

   - return categories are "True", "False", and null.

5. Cohort def statistics for dates, numbers: "histogram_data_string" was changed to "histogram_data"
and is now a JSON data structure instead of a JSON string.

6. A lot of method renaming and reorganizing of CohortDefProcessor and DisplayProcessor. If you have
any custom ones, you'll want to review the abstract methods and check everything.

   - see classes {ref}`cohort-def-processor-abstract` and {ref}`display-processor-abstract`


