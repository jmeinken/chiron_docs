# Install Django and Chiron

Chiron is built as a Django app. You must have a basic familiarity with Python and the Django
framework. Chiron stores patient data in MongoDB. You don't need to be proficient with MongoDB
to get started, but you do need access to a running Mongo installation.

## Requirements


- You must have Python 3.
- You must have pip (and recommend using a virtual environment).
- You must have a relational database that Django can use (or use built-in sqlite3 database).
- You must have a running instance of MongoDB.

## Step 1: Create or use an existing Django project

To create a new Django project:

```
pip install django
django-admin startproject myproject
```
    
## Step 2: Install the chiron app into your Django project

Install Chiron and its dependencies using pip:
```
pip install git+https://github.com/cchmc-bmi-os/chiron.git@develop#egg=chiron
```
    
In your settings.py file:
```
# add humanize, crispy_forms, and chiron to installed apps:

INSTALLED_APPS = [
   ...
   'django.contrib.humanize',
   'crispy_forms',
   'chiron',
   ...
]

# add chiron context processors
TEMPLATES[0]['OPTIONS']['context_processors'].append('chiron.context_processors.chiron_globals')

# for unsecured install on localhost:
CHIRON_MONGO_CONNECTION_SETTINGS = {
   'host' : 'localhost',
}

# more complex example:
CHIRON_MONGO_CONNECTION_SETTINGS = {
   'host' : '129.137.7.27',
   'username' : 'meinkejf',
   'password' : '...',
   'authSource' : 'admin',
}
# (optional) Add chiron site title and Subject ID label
CHIRON_SITE_TITLE = 'Chiron Development'
```
	
	
In your urls.py:

```
# make sure you're importing 'include'
from django.urls import path, include

# add chiron to path list.
# example 1: put the chiron views inside a subdirectory 'chiron'
path('chiron/', include(('chiron.urls', 'chiron'), namespace='chiron')),

# example 2: put the chiron views directly at the root URL
path('', include(('chiron.urls', 'chiron'), namespace='chiron')),
...
```
	
## Step 3: Add the Chiron & Django tables to the database

Although Chiron uses MongoDB to store your patient/research data, all other data related to 
Chiron configuration go into whichever relational database you're using for Django.

create Chiron database tables:
```
python manage.py migrate
```
	
## Step 4: Set up authentication

All Chiron views require the user to be logged into Django. Django comes with a wide variety of
authentication tools. However, a login view is not set up by default.

You should consider how you want to manage user login (local, LDAP, federated login, etc.) and
set up a custom login system for your specific needs. However, I will provide instructions here
for a quick, basic local login system for those who just want to get started.

First you need to make a login view template. Templates go inside apps, so we will create an app,
set up a template directory, and create our template as registration/login.html (the Django default)

```
python manage.py startapp main
cd main
mkdir templates
cd templates
mkdir registration
```

inside the registration folder, add a file ``login.html``:

```
{% extends 'chiron/core/base.html' %}

{% block title %}Login{% endblock %}

{% block content %}
<h2>Login</h2>
<form method="post">
{% csrf_token %}
{{ form.as_p }}
<button type="submit">Login</button>
</form>
{% endblock %}
```
	
Edit your urls.py file again to include the built-in Django authentication views:
```
...
path('accounts/', include('django.contrib.auth.urls')),
...
```
    
Create a superuser account:
```
python manage.py createsuperuser
```
    
Now you should be able to log in:

- Start the Django dev server:
```
python manage.py runserver
```

- Go to the URL you set up for chiron in step 2 (ex: ``http://localhost:8000/chiron``)

- Enter your user credentials

- You should now see a working version of Chiron with no data.
