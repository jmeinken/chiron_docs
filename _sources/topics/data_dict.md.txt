
(understanding-dd)=
# Understanding the Data Dictionary

The Chiron data dictionary contains all the metadata about your research data. Chiron will use the data dictionary to build the MongoDB database and import the data automatically.

(data-model-explainer)=
## The MongoDB Data Model

Your MongoDB database has a simple data model with a single subject (root) collection at the core and any number of 0:many subcollections linked to it:

```{mermaid}

    erDiagram
        Subject ||--o{ Medication : ""
        Subject ||--o{ Biospecimen : ""
        Subject ||--o{ Encounter : ""
        Subject ||--o{ Procedure : ""
```

<hr>

## Datasets

Starting in Chiron Version 4.0, you can have multiple unrelated datasets loaded into a single chiron instance. This is useful if you have a lot of datasets and don't want to maintain a separate chiron instance for each one. User permissions for each dataset are distinct, and a user can only interact with one dataset at a time. There's no way to do queries across multiple datasets.

```{mermaid}

    erDiagram
        Dataset1_Subject ||--o{ Medication : ""
        Dataset1_Subject ||--o{ Biospecimen : ""
        Dataset1_Subject ||--o{ Encounter : ""
        Dataset2_Subject ||--o{ Survey : ""
        Dataset2_Subject ||--o{ Sample : ""
```

<hr>

## Subcollection Relationships

Starting in Chiron version 3.1, you can also associate subcollection records with each other using the CollectionRelationship model. This will help when Chiron is generating a dataset from multiple subcollections and should be used when it makes sense.

Here is the above example again with Procedures and Biospecimen linked to their associated encounters.

```{mermaid}

    erDiagram
        Subject ||--o{ Medication : ""
        Subject ||--o{ Biospecimen : ""
        Subject ||--o{ Encounter : ""
        Subject ||--o{ Procedure : ""
        Encounter ||--o{ Biospecimen : "collected during"
        Encounter ||--o{ Procedure : "performed during"
```

## Data Dictionary Components

(dataset-def)=
**Datasets**

Datasets are a top-level way of separating unrelated data into separate buckets. Each dataset will have its own MongoDB database, and will not have any relationships to the other datasets. In the user interface, users access a single dataset at a time, and a user can have different permissions on different datasets.

For chiron instances with only 1 dataset, most of the dataset functionality will be hidden.

(collection-def)=
**Collections**

Collections in the data dictionary represent literal MongoDB collections. If you're not familiar with MongoDB, you can think of a collection as a table.

Every dataset will have one subject collection (specified in `Dataset.root_collection`) to store data that is 1:1 with the subject. Then you can have any number of sub-collections for a dataset that are 1:many or many:many with the subject.

There is always a 1:many relationship between your subject collection and each sub-collection.

(concept-def)=
**Concepts**

Each collection can have any number of concepts. The subject collection could have concepts like birthdate and gender. A biospecimen collection could have concepts like collection date and sample amount.

(source-def)=
**Sources**

A Source is a dataset to load into Chiron. It can be any Python iterable that returns records that correspond to the collection it's being loaded into.

For example, a SubjectDemographics table in a database could be a Source for the Subject collection. A CSV file with one row per patient medication could be a Source for a Medication collection.

Chiron manages the ETL process from your Sources into MongoDB. There's built-in support for data coming from a database through the Django ORM or from CSV files. If you have data coming from other types of sources, you can write your own Source processor class to enable Chiron to consume it.

(category-def)=
**Categories**

Categories define a hierarchical structure for users to browse concepts. They have no effect on queries or how the data is stored in MongoDB.

